<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd http://www.mulesoft.org/schema/mule/munit-tools http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd 
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
    <munit:config name="customer-papi-apikit-test.xml" />
    <http:request-config name="HTTP_Request_Configuration" basePath="/api">
        <http:request-connection host="localhost" port="8092" />
    </http:request-config>
    <munit:test name="post:\customer:application\json:customer-papi-config-201-application\json-FlowTest" description="Verifying functionality of [post:\customer:application\json:customer-papi-config-201-application\json]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="customer-papi-main" />
            <munit:enable-flow-source value="post:\customer:application\json:customer-papi-config" />
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-payload value="#[MunitTools::getResourceAsString('scaffolder/request/post_customer_application_json.json')]" />
			<munit-tools:mock-when doc:name="Mock customer insert" doc:id="7f3c68b2-4e32-42c5-ac91-ac0568a0f08d" processor="db:insert">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Insert in customer table" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="c71912c9-ef4d-41af-b500-b010f906c12f" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="DatabaseConfig" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[%dw 2.0&#10;output application/json&#10;---&#10;["Success"]]' />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock address insert" doc:id="15b80203-ad42-41bb-b9a1-0c8c4f41a36f" processor="db:bulk-insert">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Bulk insert into address" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="10b56984-865e-4537-bcb0-9143f173358a" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="DatabaseConfig" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[%dw 2.0&#10;output application/json&#10;---&#10;["Success"]]' />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock phone insert" doc:id="c484cc65-70dc-4b29-b536-e73bd74b1c21" processor="db:bulk-insert">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Bulk insert into phone" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="ec3b82a7-3d04-42a0-b05b-3d31fdd91218" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="DatabaseConfig" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[%dw 2.0&#10;output application/json&#10;---&#10;["Success"]]' />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock email insert" doc:id="3fba41b1-f117-4afe-a6c8-8362540b075a" processor="db:bulk-insert">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Bulk insert into email" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="ed103966-104a-4296-a2ba-e9c0b3b4eaf6" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="DatabaseConfig" attributeName="config-ref" />
				</munit-tools:with-attributes>
			</munit-tools:mock-when>
        </munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="POST" path="/customer">
                <http:headers>#[{"Accept":"application/json","Content-Type":"application/json"}]</http:headers>
            </http:request>
        </munit:execution>
        <munit:validation>
			<ee:transform doc:name="expectedPayload" doc:id="85902823-64bc-41b8-a0ef-8d09b15cc4e8" >
				<ee:message />
				<ee:variables >
					<ee:set-variable variableName="expectedPayload" ><![CDATA[%dw 2.0
output application/json
var expectedPayload  = readUrl('classpath://scaffolder/response/post_201_customer_application_json.json','application/json')
---
{
    "timestamp": payload.timestamp,
    "version": "1.0.0",
    "apiName": "customer-papi",
    "source": "H2 Database",
    "success": true,
    "correlationId": payload.correlationId,
    "data": expectedPayload.data
    
    }]]></ee:set-variable>
				</ee:variables>
			</ee:transform>
			<munit-tools:assert-that doc:name="Assert That - Payload is Expected" doc:id="eff49bbe-bb7f-4e9c-9fd0-bad105649563" message="The response payload is not correct!" expression="#[output application/java --- (write(payload, 'application/json') as String)]" is='#[output application/json --- MunitTools::equalTo(write(vars.expectedPayload,"application/json"))]' />
        </munit:validation>
    </munit:test>
    <munit:test name="get:\customer:customer-papi-config-200-application\json-FlowTest" description="Verifying functionality of [get:\customer:customer-papi-config-200-application\json]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="customer-papi-main" />
            <munit:enable-flow-source value="get:\customer:customer-papi-config" />
        </munit:enable-flow-sources>
        <munit:behavior >
			<munit-tools:mock-when doc:name="Mock DB flow ref" doc:id="f399d9e4-16ed-4985-81ad-79f9826ac2b3" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="db-get-customer-list" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="695c4d25-813f-44f8-8c2f-1c7a9dec9f14" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="database-get-customer-list" attributeName="name" />
					<munit-tools:with-attribute whereValue="db-get-customer-list" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="695c4d25-813f-44f8-8c2f-1c7a9dec9f14" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="database-get-customer-list" attributeName="name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:variables >
						<munit-tools:variable key="customerList" value="#[MunitTools::getResourceAsString('scaffolder/response/get_customerList.json')]"  mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="addressList" value="#[MunitTools::getResourceAsString('scaffolder/response/get_addressList.json')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="phoneList" value="#[MunitTools::getResourceAsString('scaffolder/response/get_phoneList.json')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="emailList" value="#[MunitTools::getResourceAsString('scaffolder/response/get_emailList.json')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="statusCode" value="#['200']" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/customer">
                <http:headers>#[{"Accept":"application/json"}]</http:headers>
            </http:request>
        </munit:execution>
        <munit:validation>
			<ee:transform doc:name="expectedPayload" doc:id="7b7717eb-8108-4874-85f1-ed9b6cfc64bc" >
				<ee:message />
				<ee:variables >
					<ee:set-variable variableName="expectedPayload" ><![CDATA[%dw 2.0
output application/json
var expectedPayload  = readUrl('classpath://scaffolder/response/get_200_customer_application_json.json','application/json')
---
{
    "timestamp": payload.timestamp,
    "version": "1.0.0",
    "apiName": "customer-papi",
    "source": "H2 Database",
    "success": true,
    "correlationId": payload.correlationId,
    "data": expectedPayload.data
    
    }]]></ee:set-variable>
				</ee:variables>
			</ee:transform>
			<munit-tools:assert-that doc:name="Assert That - Payload is Expected" doc:id="b1c6b980-743e-4b72-a1f6-a837d5aec31f" message="The response payload is not correct!" expression="#[output application/java --- (write(payload, 'application/json') as String)]" is='#[output application/json --- MunitTools::equalTo(write(vars.expectedPayload,"application/json"))]' />
        </munit:validation>
    </munit:test>
    <munit:test name="delete:\customer\(id):customer-papi-config-200-application\json-FlowTest" description="Verifying functionality of [delete:\customer\(id):customer-papi-config-200-application\json]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="customer-papi-main" />
            <munit:enable-flow-source value="delete:\customer\(id):customer-papi-config" />
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-variable variableName="id" value="#['1']" doc:name="id" />
			<munit-tools:mock-when doc:name="Mock DB response" doc:id="37b26208-2778-42c6-a20c-26c644bcdb3b" processor="db:delete">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Delete" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="84534586-1aab-4e51-8214-a6c0a440dd84" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="DatabaseConfig" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[%dw 2.0&#10;output application/json&#10;---&#10;readUrl('classpath://scaffolder/response/delete_200_customer_{id}_application_json.json','application/json')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
        </munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="DELETE" path="#['/customer/$(vars.id)']">
                <http:headers>#[{"Accept":"application/json"}]</http:headers>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 200" />
            <ee:transform doc:name="expectedPayload" doc:id="7931f215-ec9e-4e5e-b493-c491fd88b106" >
				<ee:message >
				</ee:message>
				<ee:variables >
					<ee:set-variable variableName="expectedPayload" ><![CDATA[%dw 2.0
output application/json
var expectedPayload  = readUrl('classpath://scaffolder/response/delete_200_customer_{id}_application_json.json','application/json')
---
{
    "timestamp": payload.timestamp,
    "version": "1.0.0",
    "apiName": "customer-papi",
    "source": "H2 Database",
    "success": true,
    "correlationId": payload.correlationId,
    "data": expectedPayload.data
    
    }]]></ee:set-variable>
				</ee:variables>
			</ee:transform>
			<munit-tools:assert-that expression="#[output application/java --- (write(payload, 'application/json') as String)]" is='#[output application/json --- MunitTools::equalTo(write(vars.expectedPayload,"application/json"))]' message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
    </munit:test>
    <munit:test name="delete:\customer\(id):customer-papi-config-400-application\json-FlowTest" description="Verifying functionality of [delete:\customer\(id):customer-papi-config-400-application\json]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="customer-papi-main" />
            <munit:enable-flow-source value="delete:\customer\(id):customer-papi-config" />
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-variable variableName="id" value="#['1']" doc:name="id" />
			<munit-tools:mock-when doc:name="Mock DB response" doc:id="a143ae65-825f-45e0-862e-3f0e50be9dba" processor="db:delete" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Delete" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="84534586-1aab-4e51-8214-a6c0a440dd84" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="DatabaseConfig" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[0]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
        </munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="DELETE" path="#['/customer/$(vars.id)']">
                <http:headers>#[{"Accept":"application/json"}]</http:headers>
                <http:response-validator>
                    <http:success-status-code-validator values="400" />
                </http:response-validator>
            </http:request>
        </munit:execution>
        <munit:validation>
            <ee:transform doc:name="expectedPayload" doc:id="01e895c7-ad76-4207-a727-fba4df351f4e">
				<ee:message />
				<ee:variables>
					<ee:set-variable variableName="expectedPayload"><![CDATA[%dw 2.0
output application/json
var expectedPayload  = readUrl('classpath://scaffolder/response/delete_400_customer_{id}_application_json.json','application/json')
---
{
  "success": false,
  "apiName": p('app.name'),
  "version": "1.0.0",
  "source": "H2 Database",
  "correlationId": payload.correlationId,
  "timestamp": payload.timestamp,
   "errorDetails": expectedPayload.errorDetails
    
    }]]></ee:set-variable>
				</ee:variables>
			</ee:transform>
			<munit-tools:assert-that doc:name="Assert That - Payload is Expected" doc:id="2de48cf1-ed71-4bd3-87a6-7fe81deb461f" message="The response payload is not correct!" expression="#[output application/java --- (write(payload, 'application/json') as String)]" is='#[output application/json --- MunitTools::equalTo(write(vars.expectedPayload,"application/json"))]' />
        </munit:validation>
    </munit:test>
    <munit:test name="patch:\customer\(id):application\json:customer-papi-config-200-application\json-FlowTest" description="Verifying functionality of [patch:\customer\(id):application\json:customer-papi-config-200-application\json]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="customer-papi-main" />
            <munit:enable-flow-source value="patch:\customer\(id):application\json:customer-papi-config" />
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-payload value="#[MunitTools::getResourceAsString('scaffolder/request/patch_customer_{id}_application_json.json')]" />
            <set-variable variableName="id" value="#['1']" doc:name="id" />
			<munit-tools:mock-when doc:name="Mock bulk update address" doc:id="41a7cf61-6e2d-4567-9ff9-e226f0da3774" processor="db:bulk-update">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Bulk update address" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="2af4fdd5-b6fa-4b26-8c7d-91afe4781678" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="DatabaseConfig" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[%dw 2.0&#10;output application/json&#10;---&#10;["Success"]]' />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock bulk update phone" doc:id="0828d7fe-f962-46a5-a2c8-dd050171e613" processor="db:bulk-update">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Bulk update phone" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="78ce30c2-430f-4424-b56d-0a80b308b353" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="DatabaseConfig" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[%dw 2.0&#10;output application/json&#10;---&#10;["Success"]]' />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock Bulk update email" doc:id="9212fa57-48a7-4b33-9924-5a6c02870ac3" processor="db:bulk-update">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Bulk update email" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="f0f4406d-5794-4cdc-8283-0ace11d99274" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="DatabaseConfig" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[%dw 2.0&#10;output application/json&#10;---&#10;["Success"]]' />
				</munit-tools:then-return>
			</munit-tools:mock-when>
        </munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="PATCH" path="#['/customer/$(vars.id)']">
                <http:headers>#[{"Accept":"application/json","Content-Type":"application/json"}]</http:headers>
            </http:request>
        </munit:execution>
        <munit:validation>
			<ee:transform doc:name="expectedPayload" doc:id="31735dc3-404f-4911-811e-6a5a0b7bbef4" >
				<ee:message />
				<ee:variables >
					<ee:set-variable variableName="expectedPayload" ><![CDATA[%dw 2.0
output application/json
var expectedPayload  = readUrl('classpath://scaffolder/response/patch_200_customer_{id}_application_json.json','application/json')
---
{
    "timestamp": payload.timestamp,
    "version": "1.0.0",
    "apiName": "customer-papi",
    "source": "H2 Database",
    "success": true,
    "correlationId": payload.correlationId,
    "data": expectedPayload.data
    
    }]]></ee:set-variable>
				</ee:variables>
			</ee:transform>
			<munit-tools:assert-that doc:name="Assert That - Payload is Expected" doc:id="4f560770-96df-402d-9258-63cf2e6d76a3" message="The response payload is not correct!" expression="#[output application/java --- (write(payload, 'application/json') as String)]" is='#[output application/json --- MunitTools::equalTo(write(vars.expectedPayload,"application/json"))]' />
        </munit:validation>
    </munit:test>
    <munit:test name="patch:\customer\(id):application\json:customer-papi-config-400-application\json-FlowTest" description="Verifying functionality of [patch:\customer\(id):application\json:customer-papi-config-400-application\json]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="customer-papi-main" />
            <munit:enable-flow-source value="patch:\customer\(id):application\json:customer-papi-config" />
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-payload value="#[MunitTools::getResourceAsString('scaffolder/request/patch_customer_{id}_application_json.json')]" />
            <set-variable variableName="id" value="#['1']" doc:name="id" />
			<munit-tools:mock-when doc:name="Mock when" doc:id="7181f3a6-e510-4c89-85a4-c973a7afe9bf" processor="db:bulk-update">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Bulk update address" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="2af4fdd5-b6fa-4b26-8c7d-91afe4781678" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="DatabaseConfig" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json ---&#10;[0]]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
        </munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="PATCH" path="#['/customer/$(vars.id)']">
                <http:headers>#[{"Accept":"application/json","Content-Type":"application/json"}]</http:headers>
                <http:response-validator>
                    <http:success-status-code-validator values="400" />
                </http:response-validator>
            </http:request>
        </munit:execution>
        <munit:validation>
			<ee:transform doc:name="expectedPayload" doc:id="f054f090-cd24-4d8b-ab4b-eb99ed1978d0" >
				<ee:message />
				<ee:variables >
					<ee:set-variable variableName="expectedPayload" ><![CDATA[%dw 2.0
output application/json
var expectedPayload  = readUrl('classpath://scaffolder/response/patch_400_customer_{id}_application_json.json','application/json')
---
{
  "success": false,
  "apiName": p('app.name'),
  "version": "1.0.0",
  "source": "H2 Database",
  "correlationId": payload.correlationId,
  "timestamp": payload.timestamp,
   "errorDetails": expectedPayload.errorDetails
    
    }]]></ee:set-variable>
				</ee:variables>
			</ee:transform>
			<munit-tools:assert-that doc:name="Assert That - Payload is Expected" doc:id="2f847942-a851-4edb-8bbe-40ddba076c0c" message="The response payload is not correct!" expression="#[output application/java --- (write(payload, 'application/json') as String)]" is='#[output application/json --- MunitTools::equalTo(write(vars.expectedPayload,"application/json"))]' />
        </munit:validation>
    </munit:test>
</mule>
